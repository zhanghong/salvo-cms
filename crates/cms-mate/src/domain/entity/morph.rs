//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

use chrono::NaiveDateTime;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use cms_core::utils::time;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "mate_morphable")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub editor_type: String,
    pub editor_id: i64,
    pub app_id: i64,
    pub kind_id: i64,
    pub item_id: i64,
    pub instance_type: String,
    pub instance_id: i64,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::app::Entity",
        from = "Column::AppId",
        to = "super::app::Column::Id"
    )]
    App,

    #[sea_orm(
        belongs_to = "super::kind::Entity",
        from = "Column::KindId",
        to = "super::kind::Column::Id"
    )]
    Kind,

    #[sea_orm(
        belongs_to = "super::item::Entity",
        from = "Column::ItemId",
        to = "super::item::Column::Id"
    )]
    Item,
}

impl Related<super::app::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::App.def()
    }
}

impl Related<super::kind::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Kind.def()
    }
}

impl Related<super::item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Item.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn created_time(&self) -> String {
        time::to_db_time(&self.created_at)
    }

    pub fn updated_time(&self) -> String {
        time::to_db_time(&self.updated_at)
    }
}
