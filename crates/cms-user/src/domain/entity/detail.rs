//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4
use chrono::{NaiveDate, NaiveDateTime};
use cms_core::utils::time_utils;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user_details")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub editor_type: String,
    pub editor_id: i64,
    #[sea_orm(unique)]
    pub user_id: i64,
    pub identity_no: String,
    pub province_id: i64,
    pub city_id: i64,
    pub district_id: i64,
    pub address: String,
    pub born_on: Option<NaiveDate>,
    pub emotional: String,
    pub graduated_from: String,
    pub company_name: String,
    pub staff_title: String,
    pub introduction: String,
    pub honor: String,
    pub expertises: String,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id"
    )]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn born_date(&self) -> Option<String> {
        if self.born_on.is_none() {
            return None;
        }

        let str = time_utils::to_db_date(&self.born_on.unwrap());
        Some(str)
    }
}
