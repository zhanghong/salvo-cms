//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use chrono::NaiveDateTime;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use cms_core::{domain::vo::EditorVO, utils::time};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub editor_type: String,
    pub editor_id: i64,
    pub no: String,
    pub name: String,
    pub realname: String,
    pub nickname: String,
    pub user_type: String,
    pub gender: i16,
    pub phone: String,
    pub avatar_path: String,
    pub email: String,
    pub data_source_id: i64,
    pub password: String,
    pub old_password: String,
    pub salt: String,
    pub password_modified_at: Option<NaiveDateTime>,
    pub attempted_times: i16,
    pub last_attempted_at: Option<NaiveDateTime>,
    pub last_login_id: i64,
    pub last_login_at: Option<NaiveDateTime>,
    pub is_authed: bool,
    pub is_enabled: bool,
    pub is_test: bool,
    pub is_deleted: bool,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub deleted_at: Option<NaiveDateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::detail::Entity")]
    Detail,
}

impl Related<super::detail::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Detail.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn avatar_url(&self) -> String {
        self.avatar_path.to_owned()
    }

    pub fn created_time(&self) -> String {
        time::to_db_time(&self.created_at)
    }

    pub fn updated_time(&self) -> String {
        time::to_db_time(&self.updated_at)
    }

    pub fn into_editor_inner(&self) -> EditorVO {
        let avatar_url = self.avatar_url();
        EditorVO {
            id: self.id,
            no: self.no.to_owned(),
            name: self.name.to_owned(),
            phone: self.phone.to_owned(),
            email: self.email.to_owned(),
            avatar_url: avatar_url.to_owned(),
        }
    }
}

impl Into<EditorVO> for Model {
    fn into(self) -> EditorVO {
        Self::into_editor_inner(&self)
    }
}

impl Into<EditorVO> for &Model {
    fn into(self) -> EditorVO {
        let avatar_url = self.avatar_url();

        EditorVO {
            id: self.id,
            no: self.no.to_owned(),
            name: self.name.to_owned(),
            phone: self.phone.to_owned(),
            email: self.email.to_owned(),
            avatar_url: avatar_url.to_owned(),
        }
    }
}
