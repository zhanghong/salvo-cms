//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use std::env;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: Uuid,
    pub no: String,
    pub name: String,
    pub phone: String,
    pub avatar_path: String,
    pub email: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn avatar_url(&self) -> String {
        if self.avatar_path.is_empty() {
            env::var("USER_AVATAR_URL_DEFAULT").unwrap_or_else(|_| String::from(""))
        } else if !self.avatar_path.starts_with("http://")
            && !self.avatar_path.starts_with("https://")
        {
            let prefix = env::var("USER_AVATAR_URL_PREFIX").unwrap_or_else(|_| String::from(""));
            format!("{}{}", prefix, self.avatar_path)
        } else {
            self.avatar_path.clone()
        }
    }
}
